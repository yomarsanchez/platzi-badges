{"version":3,"sources":["images/platziconf-logo.svg","images/logo.svg","images/twitter.svg","components/Navbar.js","components/BadgesList.js","pages/Badges.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","logo","alt","React","Component","BadgesList","this","props","badges","map","badge","key","id","avatarUrl","firstName","width","lastName","twitter","jobTitle","Badges","state","email","confLogo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,8PCqB5BC,E,uKAdX,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,gBAAgBC,KAAK,KAChC,yBAAKD,UAAU,qBAAqBE,IAAKC,IAAMC,IAAI,SACnD,0BAAMJ,UAAU,qBAAhB,UACA,0BAAMA,UAAU,oBAAhB,e,GARSK,IAAMC,W,gBC4CZC,E,uKA3CX,OACE,wBAAIP,UAAU,iBACXQ,KAAKC,MAAMC,OAAOC,KAAI,SAAAC,GACrB,OACE,wBAAIC,IAAKD,EAAME,IACb,yBAAKd,UAAU,qBACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,qBACb,yBACEE,IAAKU,EAAMG,UACXf,UAAU,iBACVI,IAAKQ,EAAMI,UACXC,MAAM,QAGV,yBAAKjB,UAAU,UACb,yBAAKA,UAAU,2BACb,wBAAIA,UAAU,oBACXY,EAAMI,UADT,IACqBJ,EAAMM,UAE3B,yBAAKlB,UAAU,WACb,yBAAKE,IAAKiB,IAASf,IAAI,UAAUa,MAAM,OACvC,2BAAOjB,UAAU,sBAAjB,OACQ,gCACLY,EAAMO,UAGX,+BAAQP,EAAMQ,UACd,uBAAGpB,UAAU,wBACX,2BAAOA,UAAU,cAAjB,4B,GA/BCM,aC4GVe,E,4MAxGbC,MAAQ,CACNZ,OAAQ,CACN,CACEI,GAAI,uCACJE,UAAW,QACXE,SAAU,QACVK,MAAO,wBACPH,SAAU,wBACVD,QAAS,uBACTJ,UACE,gFAEJ,CACED,GAAI,uCACJE,UAAW,QACXE,SAAU,YACVK,MAAO,sBACPH,SAAU,2BACVD,QAAS,sBACTJ,UACE,gFAEJ,CACED,GAAI,uCACJE,UAAW,UACXE,SAAU,SACVK,MAAO,oBACPH,SAAU,2BACVD,QAAS,qBACTJ,UACE,gFAEJ,CACED,GAAI,uCACJE,UAAW,QACXE,SAAU,QACVK,MAAO,qBACPH,SAAU,6BACVD,QAAS,uBACTJ,UACE,gFAEJ,CACED,GAAI,uCACJE,UAAW,UACXE,SAAU,OACVK,MAAO,qBACPH,SAAU,4BACVD,QAAS,mBACTJ,UACE,gFAEJ,CACED,GAAI,uCACJE,UAAW,WACXE,SAAU,OACVK,MAAO,mBACPH,SAAU,4BACVD,QAAS,oBACTJ,UACE,gFAEJ,CACED,GAAI,uCACJE,UAAW,SACXE,SAAU,UACVK,MAAO,kBACPH,SAAU,kCACVD,QAAS,0BACTJ,UACE,kF,uDAMN,OACE,yBAAKf,UAAU,UACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,mBAAmBE,IAAKsB,IAAUpB,IAAI,WAIzD,yBAAKJ,UAAU,qBACb,yBAAKA,UAAU,mBACb,uBAAGC,KAAK,cAAcD,UAAU,mBAAhC,eAMJ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYU,OAAQF,KAAKc,MAAMZ,gB,GAjGtBJ,aCKDmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD0H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83dcc9d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/platziconf-logo.f246f5f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.0026b862.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.c9f12008.svg\";","import React from 'react'\n\nimport './styles/Navbar.css'\nimport logo from '../images/logo.svg'\n\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <div className=\"container-fluid\">\n          <a className=\"Navbar__brand\" href=\"/\">\n            <img className=\"Navbar__brand-logo\" src={logo} alt=\"Logo\" />\n            <span className=\"font-weight-light\">Platzi</span>\n            <span className=\"font-weight-bold\">Conf</span>\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n","import React, { Component } from 'react'\n\nimport twitter from '../images/twitter.svg'\n\nclass BadgesList extends Component {\n  render() {\n    return (\n      <ul className=\"list-unstyled\">\n        {this.props.badges.map(badge => {\n          return (\n            <li key={badge.id}>\n              <div className=\"Badges__list-card\">\n                <div className=\"row no-gutters align-items-center\">\n                  <div className=\"col-2 text-center\">\n                    <img\n                      src={badge.avatarUrl}\n                      className=\"rounded-circle\"\n                      alt={badge.firstName}\n                      width=\"75\"\n                    />\n                  </div>\n                  <div className=\"col-10\">\n                    <div className=\"Badges__list-card__body\">\n                      <h6 className=\"font-weight-bold\">\n                        {badge.firstName} {badge.lastName}\n                      </h6>\n                      <div className=\"twitter\">\n                        <img src={twitter} alt=\"Twitter\" width=\"15\" />\n                        <small className=\"font-weight-normal\">\n                          &nbsp;<b>@</b>\n                          {badge.twitter}\n                        </small>\n                      </div>\n                      <small>{badge.jobTitle}</small>\n                      <p className=\"card-text text-right\">\n                        <small className=\"text-muted\">3 mins ago</small>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n}\n\nexport default BadgesList\n","import React, { Component } from 'react'\n\nimport './styles/Badges.css'\nimport confLogo from '../images/platziconf-logo.svg'\nimport Navbar from '../components/Navbar'\nimport BadgesList from '../components/BadgesList'\n\nclass Badges extends Component {\n  state = {\n    badges: [\n      {\n        id: '2de30c42-9deb-40fc-a41f-05e62b5939a7',\n        firstName: 'Freda',\n        lastName: 'Grady',\n        email: 'Leann_Berge@gmail.com',\n        jobTitle: 'Legacy Brand Director',\n        twitter: 'FredaGrady22221-7573',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/f63a9c45aca0e7e7de0782a6b1dff40b?d=identicon',\n      },\n      {\n        id: 'd00d3614-101a-44ca-b6c2-0be075aeed3d',\n        firstName: 'Major',\n        lastName: 'Rodriguez',\n        email: 'Ilene66@hotmail.com',\n        jobTitle: 'Human Research Architect',\n        twitter: 'MajorRodriguez61545',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/d57a8be8cb9219609905da25d5f3e50a?d=identicon',\n      },\n      {\n        id: '63c03386-33a2-4512-9ac1-354ad7bec5e9',\n        firstName: 'Daphney',\n        lastName: 'Torphy',\n        email: 'Ron61@hotmail.com',\n        jobTitle: 'National Markets Officer',\n        twitter: 'DaphneyTorphy96105',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/e74e87d40e55b9ff9791c78892e55cb7?d=identicon',\n      },\n      {\n        id: '925952de-f43d-49c3-8e04-98f1c6b9e3e6',\n        firstName: 'Jasen',\n        lastName: 'Kulas',\n        email: 'Frieda89@yahoo.com',\n        jobTitle: 'Senior Research Consultant',\n        twitter: 'JasenKulas35396-9255',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/0b7dc92c5cbcc2159b5ed9cb5d074867?d=identicon',\n      },\n      {\n        id: '5f9b5d9f-4225-4706-b3b3-330762447071',\n        firstName: 'Maynard',\n        lastName: 'Rowe',\n        email: 'Ressie79@yahoo.com',\n        jobTitle: 'Dynamic Creative Engineer',\n        twitter: 'MaynardRowe74584',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/4626f448a94e6d7c81c7bc3f7fc160da?d=identicon',\n      },\n      {\n        id: '92e7da01-75e1-401a-80ab-11e97d14f87a',\n        firstName: 'Patricia',\n        lastName: 'Koch',\n        email: 'Eula98@yahoo.com',\n        jobTitle: 'Legacy Paradigm Developer',\n        twitter: 'PatriciaKoch50746',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/d7be7c9206d8bdf7b99a61802ef42bfc?d=identicon',\n      },\n      {\n        id: 'c5f4a4ec-8cc0-4c09-a8f2-a3780d740084',\n        firstName: 'Helena',\n        lastName: 'Kilback',\n        email: 'Eryn2@gmail.com',\n        jobTitle: 'Dynamic Directives Orchestrator',\n        twitter: 'HelenaKilback49886-1693',\n        avatarUrl:\n          'https://www.gravatar.com/avatar/b2e9d23a39f852ab3bc67bd9a0176464?d=identicon',\n      },\n    ],\n  }\n\n  render() {\n    return (\n      <div className=\"Badges\">\n        <Navbar />\n\n        <div className=\"Badges__hero\">\n          <div className=\"Badges__container\">\n            <img className=\"Badges_conf-logo\" src={confLogo} alt=\"Logo\" />\n          </div>\n        </div>\n\n        <div className=\"Badges__container\">\n          <div className=\"Badges__buttons\">\n            <a href=\"/badges/new\" className=\"btn btn-primary\">\n              New Badge\n            </a>\n          </div>\n        </div>\n\n        <div className=\"Badges__container\">\n          <div className=\"Badges__list\">\n            <BadgesList badges={this.state.badges} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Badges\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport './global.css'\n// import BadgeNew from './pages/BadgeNew'\nimport Badges from './pages/Badges'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Badges />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}