{"version":3,"sources":["images/platziconf-logo.svg","images/logo.svg","images/badge-header.svg","components/Navbar.js","components/Badge.js","components/BadgeForm.js","pages/BadgeNew.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","logo","alt","React","Component","Badge","attendantName","props","firstName","lastName","confLogo","this","avatarUrl","jobTitle","twitter","BadgeForm","handleClick","e","console","log","handleSubmit","preventDefault","formValues","onSubmit","htmlFor","type","id","name","value","maxLength","onChange","email","onClick","BadgeNew","state","form","handleChange","setState","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96ae9694.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/platziconf-logo.f246f5f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.0026b862.svg\";","module.exports = __webpack_public_path__ + \"static/media/badge-header.973f5842.svg\";","import React from 'react'\n\nimport './styles/Navbar.css'\nimport logo from '../images/logo.svg'\n\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <div className=\"container-fluid\">\n          <a className=\"Navbar__brand\" href=\"/\">\n            <img className=\"Navbar__brand-logo\" src={logo} alt=\"Logo\" />\n            <span className=\"font-weight-light\">Platzi</span>\n            <span className=\"font-weight-bold\">Conf</span>\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n","import React from 'react'\n\nimport './styles/Badge.css'\nimport confLogo from '../images/badge-header.svg'\n\nclass Badge extends React.Component {\n  attendantName = () => {\n    if (this.props.firstName !== '' || this.props.lastName !== '') {\n      return (\n        <h1>\n          {this.props.firstName} <br /> {this.props.lastName}\n        </h1>\n      )\n    } else {\n      return (\n        <h1>\n          Attendant <br /> Name\n        </h1>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Badge\">\n        <div className=\"Badge__header\">\n          <img src={confLogo} alt=\"Logo de la conferencia\" />\n        </div>\n\n        <div className=\"Badge__section-name\">\n          <img\n            className=\"Badge__avatar\"\n            src={this.props.avatarUrl}\n            alt=\"Avatar\"\n          />\n          {this.attendantName()}\n        </div>\n\n        <div className=\"Badge__section-info\">\n          <h3>{this.props.jobTitle}</h3>\n          <div>@{this.props.twitter}</div>\n        </div>\n\n        <div className=\"Badge__footer\">#platziconf</div>\n      </div>\n    )\n  }\n}\n\nexport default Badge\n","import React, { Component } from 'react'\n\nclass BadgeForm extends Component {\n  // state = {\n  //   jobTitle: 'Designer',\n  // }\n\n  // handleChange = e => {\n  //   this.setState({\n  //     [e.target.name]: e.target.value,\n  //   })\n  // }\n\n  handleClick = e => {\n    console.log('Button was clicked!')\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    console.log('Form was submitted!')\n    console.log(this.props.formValues)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>New Attendant</h1>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"firstName\"\n              name=\"firstName\"\n              value={this.props.formValues.firstName}\n              maxLength=\"255\"\n              onChange={this.props.onChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"lastName\"\n              name=\"lastName\"\n              value={this.props.formValues.lastName}\n              maxLength=\"255\"\n              onChange={this.props.onChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"email\"\n              name=\"email\"\n              value={this.props.formValues.email}\n              maxLength=\"255\"\n              onChange={this.props.onChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"jobTitle\">Job Title</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"jobTitle\"\n              name=\"jobTitle\"\n              value={this.props.formValues.jobTitle}\n              maxLength=\"255\"\n              onChange={this.props.onChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"twitter\">Twitter</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"twitter\"\n              name=\"twitter\"\n              value={this.props.formValues.twitter}\n              maxLength=\"255\"\n              onChange={this.props.onChange}\n            />\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.handleClick}>\n            Save\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default BadgeForm\n","import React, { Component } from 'react'\n\nimport './styles/BadgeNew.css'\nimport confLogo from '../images/platziconf-logo.svg'\nimport Navbar from '../components/Navbar'\nimport Badge from '../components/Badge'\nimport BadgeForm from '../components/BadgeForm'\n\nclass BadgeNew extends Component {\n  state = {\n    form: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      jobTitle: '',\n      twitter: '',\n    },\n  }\n\n  handleChange = e => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"BadgeNew\">\n        <Navbar />\n\n        <div className=\"BadgeNew__hero\">\n          <div className=\"BadgeNew__container\">\n            <img className=\"BadgeNew_conf-logo\" src={confLogo} alt=\"Logo\" />\n          </div>\n        </div>\n\n        <div className=\"container pb-3\">\n          <div className=\"row\">\n            <div className=\"col-md-6 col-12 pt-2\">\n              <Badge\n                firstName={this.state.form.firstName}\n                lastName={this.state.form.lastName}\n                email={this.state.form.email}\n                jobTitle={\n                  this.state.form.jobTitle !== ''\n                    ? this.state.form.jobTitle\n                    : 'Job Title'\n                }\n                twitter={\n                  this.state.form.twitter !== ''\n                    ? this.state.form.twitter\n                    : 'twitter'\n                }\n                avatarUrl=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\n              />\n            </div>\n            <div className=\"col-md-6 col-12 pt-2\">\n              <BadgeForm\n                onChange={this.handleChange}\n                formValues={this.state.form}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BadgeNew\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport './global.css'\nimport BadgeNew from './pages/BadgeNew'\n// import Badges from './pages/Badges'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<BadgeNew />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}